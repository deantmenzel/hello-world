/**
 * An instance of the User class is, in effect, the controller in the classic model-view-controller 
 * application architecture model.
 */

import { URLParameters, RemoteJSON, Storage } from './scratchutilities.mjs';
// let { URLParameters, RemoteJSON, Storage } = await import('./scratchutilities.mjs');

class User {
  
  _configsource = './scratchconfig.json';
  _registrysource = `./db/scratchusers.json`;
  _useridkey = `userid`;
  _strategyidkey = `strategyid`;
  _firstimekey = `firsttime`;
  _localstorageid = null;
  _id = null;
  _firstname = null;
  _emailaddress = null;
  _type = 'General';
  _strategyids = null;
  _marketsymbols = null;

  /**
   * Check URL and local storage for user id. If no id from either, then no access given.
   * user id in URL takes precedence and automatically updates local storage, otherwise use
   * user id from local storage.
   */
  constructor() {
    URLParameters.useridkey = this._useridkey;
    URLParameters.strategyidkey = this._strategyidkey;
    this._localstorageid = Storage.getItem(this._useridkey);
    this._id = URLParameters.id || this._localstorageid;
    document.addEventListener('user-welcome', (event) => this._welcomeClicked(event));
  }

  /**
   * Make sure a user id is provided and that user id is in the user registry. Always get user data 
   * from the registry in case it has been updated by the administrator. No user data (apart from 
   * user id) kept in local storage for privacy and security reasons.
   * @returns {boolean} true for valid user, false for unauthorised access 
   */
  async validate() {
    try {
      if(this._id === null) throw 'No user id';
      let userRegistry = await RemoteJSON.retrieve(this._registrysource);
      let userData = userRegistry.filter(user => user[1] === this._id);
      if(userData.length != 1) throw 'User id improperly or not registered';
      this._emailaddress = userData[0][2];
      this._firstname = userData[0][3];
      this._strategyids = userData[0][4];
      this._marketsymbols = userData[0][5];
      this._type = userData[0][6];
      return true;
    } catch (error) {
      console.warn(error);
      return false;
    }
  }

  /**
   * User will often come from email link which contains user id in URL as well as other 
   * parameters. Get all parameters into local storage and then 'reset' URL to preserve privacy. 
   * If first-time access by this user id, set flag as such which will present a once-only 
   * first-time screen to a new user. A first-time user must have a user id in the URL.
   */
  async welcome() {
    if(URLParameters.id !== null) {
      // A different id indicates a new user so set firsttime flag to true
      if(this._localstorageid != this._id) this.firsttime = true;
      Storage.setItem(this._useridkey, this._id);
      Storage.setItem(this._strategyidkey, URLParameters.strategy)
      location.replace(`${location.pathname}`);
      return false
    } else {
      if(this.firsttime) document.querySelector('main').setAttribute('data-state', 'unaccepted');
      this._config = await RemoteJSON.retrieve(this._configsource);
      return this.firsttime;
    }
  }

  /**
   * Expect that this event has come from the 'user-welcome' component. The captured event is 
   * generated by a button click confirming that the user has accepted that the site captures some 
   * user data. Once the button has been clicked, the 'user-welcome' component is destroyed and the 
   * application moves on.
   * @param {event} event - Event from 'user-welcome' web component. Note that the detail property 
   * of the event is the shodowDOM from the 'user-welcome' component.
   */
  _welcomeClicked(data) {
    if('accepted' in data.detail.event.srcElement.dataset) {
      let component = data.target;
      component.setAttribute('data-state', 'accepted');
      document.querySelector('main').setAttribute('data-state', 'accepted');
      this.firsttime = null;
    }
  }

  get config() {
    return this._config;
  }

  set config(source) {
    Object.assign(this._config, source);
  }

  get id() {
    return this._id;
  }

  get firstname() {
    return this._firstname;
  }

  get emailaddress() {
    return this._emailaddress;
  }

  get type() {
    return this._type;
  }

  get strategyids() {
    return this._strategyids;
  }

  get marketsymbols() {
    return this._marketsymbols;
  }

  /**
   * If first time return true and then reset so to always return false. This is to facilitate a 
   * 'welcome' message/page to a new user.
   */
  get firsttime() {
    let value = Storage.getItem(this._firstimekey);
    return (value) == 'true' ? true : value;
  }

  /**
   * Local storage is a string so convert booleans to strings. Either of two types to save to 
   * local storage: null or string.
   */
  set firsttime(value) {
    value = (value === true) ? 'true' : value;
    value = (value === '' || value === undefined || value === null) ? null : value;
    (value === null)
    ? Storage.removeItem(this._firstimekey)
    : Storage.setItem(this._firstimekey, value)
  }

}

export { User }